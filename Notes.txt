--> Debuter avec Git et GitHub :

     Link : https://www.youtube.com/watch?v=V6Zo68uQPqE

--> Git fast version control Book : https://git-scm.com/book/en/v2

--> Installing Git Command Line Interface Tool on a machine :

	Link_1 : https://git-scm.com/downloads

	Link_2 : https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

	-> To verify that Git is successfully installed :

		$ git --version

		$ which git

--> After installing Git on your machine, you need to set it up by configuring your username and 
email address :
	
	-> You can view all of your settings and where they are coming from using:

		$ git config --list --show-origin

         or 

		$ git config -l

	-> Configure your identity because every Git Commit uses the provided information :

		$ git config --global user.name " Learn Like Leon "

		$ git config --global user.email " leon@learnlikeleon.com "

      -> To confirm your credentials or identity :

		$ git config user.name

		$ git config user.email



<--------------------------  Git Basic Commands ----------------------------------------------------------------->

--> Let's create a folder or a directory or a new project in our local machine or computer :

	$ mkdir {application_name}

--> Let's move in the created directory :

	$ cd {application_name}

--> Let's open the created empty directory with VS Code :

	$ code .

--> To start tracking all the changes done on the created directory from the moment we type 
the ' git init ' command till the end of the project :

	-> Let's initialize Git in this created empty directory ( this will tell Git to start versioning ) 
so that we can start working with Git command line tools on this project  :

		$ git init

NB : 

	- Git c'est l'outil en ligne de commande pour versioner nos fichiers.

	- GitHub c'est une application web qui va nous aider Ã  partager notre code.

--> Git can tell you if your folder has some modified files :

	$ git status

--> Navigate to your code editor and create a source code folder in that project with an "index.html" file and save it.

    <!DOCTYPE html>
    <html>
        <head>
            <title> </title>
            <meta charset = "utf-8">
        </head>

        <body>
            <h1> Hello and Welcome to Fast version Control with Git.</h1>
        </body>
    </html>


--> Let's check the modified files :

    $ git status 

NB : Git commands can be ran offline ( no internet connection is required) until you decide to add a remote repository 
where your code will be pushed in order for other people to interact with create remote repository.

--> To start tracking all changes done on a particular file(s) or all the files available in our project, we do :

    $ git add {filename.extension}

or 

    $ git add .

then we commit all the staged changes :

    $ git commit -m " A meaningful message about this change "


RQ : Basically, we say that a commit is a two steps job :

# We select which modified file to add to the commit ( Staging modified files ) :

    $ git add {filename_1.extension}

    $ git add {filename_2.extension}

# we take a snapshot ( a photograph of your work performed locally that has been staged ) of what is in the 
staging area :

    $ git commit -m " A meaningful message about this change "

--> Let's open the created 'index.html' from our command prompt window :

    -> Move to the source code folder 'src' :

        $ cd src
    
    -> Open the created 'index.html' file locally in a browser :

        $ start index.html
    
--> Let's add some "CSS" style to the webpage using the 'style' tags.

    <!-- Let's add some CSS to make all the content of this webpage centered  -->
    <style type="text/css">
        h1{
            position:absolute;
            top: 40%;
            width: 100%;
            /* font-family: Arial, Helvetica, sans-serif; */
            font-size: 100;
            text-align: center;
        }
    </style>

--> Let's check the modified files or the state of my Git Repository :

    $ git status 

--> To visualize the difference between the last commit and the current state of my project :

    $ git diff

    -> You can inspect exactly what has changed in a particular file :

    $ git diff { filename or foldername}

    NB : Press 'q' on your keyboard to exit the ' diff ' window.

--> let's commit our changes :

    $ git add .

    $ git commit -m " Content centered using the style tags "


--> To see the list of all the commits performed in this project :

    $ git log

<--------------------------  Git Branching Commands  @ 18:11  ----------------------------------------------------------------->

--> Usually in the industry, a developer will be assigned a single task to develop or implement one functionality of the 
project. One functionality is equal to one feature which is equivalent to one branch in Git.

In this case, we diverge from the master branch where the end product of the project will be built on. This will 
allow all people contributing in this project not to mess up with the work done by other colleague and also to 
prevent damage control on the entire project or workflow.

    -> To create a new branch, we do :

        $ git branch { new-branch-name }

    For example : We need to add a green background to our website 

        $ git branch leon-green-background

    -> To check whether the branch has been created or not :

        $ git branch

    -> To switch from the 'master' branch to 'leon-green-background' branch :

        $ git checkout leon-green-background

    -> From 'leon-green-background' branch, let's add a background color to our project :
        
        For background color using the link : https://flatuicolors.com/palette/defo

        /* Let's add some background color using the 'style' tags : */

        body{
            background-color: #2ecc71;
            color: white;
        }
    
    -> Let's track our modified files :

        $ git status

        $ git diff

    -> Let's do a snapshoot or commit our work :

        $ git add .

        $ git commit -m " Green Background Added "

    -> If we do a ' git status ', we should expect a clean working directory :

        $ git status

    -> if we switch to the 'master' branch we will not be seeing all the changes 
    done by 'leon-green-background' branch until we merge those changes to the 
    'master' branch because we have two versions of the project in Git.

    To merge the changes available in 'leon-green-background' branch to the 'master' branch which 
    is the official branch used to develop the end product of this project, we do :

        -> Swith to the 'master' branch :
            
            $ git checkout master
        
        -> Inspect the difference between the two branches 'master' branch and 'leon-green-background' branch  :

            $ git diff master..leon-green-background

        -> Let's merge 'leon-green-background' branch into the 'master' branch : 

            $ git merge leon-green-background

        Notes : Automatic merge will fail if there is a merge conflict during the merge 
        procedure. This means that the two branches that you would like to merge have 
        some changes done on the same file. Basically two developers have been working 
        on the same file at the same time. To resolve the merge conflicts, you will 
        have to manually accept "the current" or "incoming changes". That's the power
        of using Git for Version control of your files.



            Your Code editor (VS Code) will highlight 'HEAD' for the changes done on the 
            'master' branch or 'current' branch while the 'Incoming' highlight will be 
            for the changes done on the other branch involved in the merge process.

            Once the merge conflicts are resolved, you will have to manually commit those 
            changes from the newly created merging branch such as ' master|merging ' :

                $ git add .
                $ git commit -m " Merge conflicts resolved "
            
        --> Once you've done working on a feature or branch, it's always a good practice 
        to delete or clean up the created branch :

            $ git branch

            $ git branch -d { name of the branch to be deleted }

        --> In case we want to delete a branch regarless the modifications available 
        on that branch ( Force delete ). In this case we want to delete a branch that has 
        some commits done on it but haven't been merged to the master branch yet :

            $ git branch -D { name of the branch to be deleted }

        NB : deleting a branch won't delete the commit but will just delete the branch's
         label or tag name in this project.

        Hint : Use the link below to visualize some basic git concepts through some 
        graphics ( Video @ 33min:59 sec).

            Link : https://onlywei.github.io/explain-git-with-d3/#commit
        
<--------------------------  Git Remote Commands  @ 36:11  ----------------------------------------------------------------->

    --> All the actions we performed before were done from our local computer or local 
    machine or server ( local repository ). That's why we say, you can use git commands 
    from your command line or teminal without internet connection. Once you are happy 
    with your project and you would like to share, collaborate with other developers 
    around the world; consequently you will need a Remote server that will allow you 
    to remotely establish a connection between your local repository (local machine) 
    and the remote repository available in your Remote server (such as GitHub, BitBucket,
     etc...). Once your remote repository is successfully added using the "git remote add origin " command 
    and your code editor has been successfully granted access to remotely connect to 
    your GitHub account with SSH; you can successfully push your work or project available 
    in your local repository to your Remote repository created in your GitHub account.

    RQ : At this stage, an good internet connection is required because we need a remote 
    Repository.

    --> Let's go to GitHub, then sign In or sign Up so that we can get access and create 
    a new repository in the logged in GitHub account. 

        -> If it's your first time using your local computer with GitHub web platform, you need 
        to set a 'SSH' connection from your computer to your GitHub account.

        -> Go to google and search for " Connecting to GitHub with SSH " :
            Link : https://docs.github.com/en/authentication/connecting-to-github-with-ssh

            -> Make sure you have Git installed on your computer and you have GitBash 
            installed as well. A simple installation of Git will automatically make 
            Gitbash available in your computer.

                To install Git on your computer : https://git-scm.com/downloads

            -> click on ' Generating a new SSH key and adding it to the ssh-agent ' and proceed 
            with the instructions based on your operating system.

                Link : https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

            
            -> Once you've generated a new SSH key and you have ensured that the 'ssh-agent' is 
            running. Please add your SSH private key to the ssh-agent :

                $ ssh-add ~/.ssh/id_ed25519

            -> Click on ' Adding a new SSH key to your GitHub account ' :
                Link : https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

                -> you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard.

                    $ cd .ssh

                    $ vim id_ed25519.pub

                Notes : Please copy your key and press " :wq " to exit the editor mode

            -> Finally add the copied SSH key in your GitHub account under 'Settings' as 
            shown on the webpage ' Adding a new SSH key to your GitHub account ' according to 
            your operating system.

        --> Let's create a new repository for our project in our GitHub account. Normally we use one repository 
        for a single project. 
            -> Navigate to your GitHub account, hit on the 'Repositories' tab
            -> Hit 'New' button to create a new repository.
            -> Give it a name, a description while setting it as "public" then hit ' Create repository '.

        Hint : The above procedure is done when you are the one starting the project on your local 
        or personal computer and later on you've decided to open for more collaboration on 
        the project with other people or developers.

        --> Once the new repository is created_GitHub automatically provides a set of instructions to follow in
         order to push your work to the remote repository.

            -> In case you've just created an empty directory for your project using the commad line 
            after performing " mkdir { foldername } " and " cd { foldername } " commands; you can decide to add 
            a "README.md" file in the created empty directory and then initialize 
            Git at this point. In this case, all the commands given under the 
            section 'â¦or create a new repository on the command line' must be followed. For example :
                
                $ echo "# web_development_1" >> README.md
                $ git init
                $ git add README.md
                $ git commit -m "first commit"
                $ git branch -M main
                $ git remote add origin git@github.com:LearnLikeLeon/web_development_1.git
                $ git push -u origin main

            -> In case you've been working on a project on your personal computer and you would like to 
            push or upload your work into a created remote repository; therefore just follow the commands 
            given by the section 'â¦or push an existing repository from the command line' :

                $ git remote add origin git@github.com:LearnLikeLeon/web_development_1.git

                -> To verify that you have a Git Remote Server available :

                    $ git remote -v

                -> To push our work from the local repository to the remote repository, we use the 
                'git push' command. By default on Git, the name of my remote server is 'origin'. That's why 
                we push a given branch to the remote server 'origin' using the general command :

                    $ git push {name of the remote server} {name of the branch to be pushed}
                or 
                    $ git push -u {name of the remote server} {name of the branch to be pushed}
                
                For example let's push the 'master' branch to the remote repository :

                    $ git push -u origin master



































