--> Debuter avec Git et GitHub :

     Link : https://www.youtube.com/watch?v=V6Zo68uQPqE

--> Git fast version control Book : https://git-scm.com/book/en/v2

--> Installing Git Command Line Interface Tool on a machine :

	Link_1 : https://git-scm.com/downloads

	Link_2 : https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

	-> To verify that Git is successfully installed :

		$ git --version

		$ which git

--> After installing Git on your machine, you need to set it up by configuring your username and 
email address :
	
	-> You can view all of your settings and where they are coming from using:

		$ git config --list --show-origin

         or 

		$ git config -l

	-> Configure your identity because every Git Commit uses the provided information :

		$ git config --global user.name " Learn Like Leon "

		$ git config --global user.email " leon@learnlikeleon.com "

      -> To confirm your credentials or identity :

		$ git config user.name

		$ git config user.email



<--------------------------  Git Basic Commands ----------------------------------------------------------------->

--> Let's create a folder or a directory or a new project in our local machine or computer :

	$ mkdir {application_name}

--> Let's move in the created directory :

	$ cd {application_name}

--> Let's open the created empty directory with VS Code :

	$ code .

--> To start tracking all the changes done on the created directory from the moment we type 
the ' git init ' command till the end of the project :

	-> Let's initialize Git in this created empty directory ( this will tell Git to start versioning ) 
so that we can start working with Git command line tools on this project  :

		$ git init

NB : 

	- Git c'est l'outil en ligne de commande pour versioner nos fichiers.

	- GitHub c'est une application web qui va nous aider Ã  partager notre code.

--> Git can tell you if your folder has some modified files :

	$ git status

--> Navigate to your code editor and create a source code folder in that project with an "index.html" file and save it.

    <!DOCTYPE html>
    <html>
        <head>
            <title> </title>
            <meta charset = "utf-8">
        </head>

        <body>
            <h1> Hello and Welcome to Fast version Control with Git.</h1>
        </body>
    </html>


--> Let's check the modified files :

    $ git status 

NB : Git commands can be ran offline ( no internet connection is required) until you decide to add a remote repository 
where your code will be pushed in order for other people to interact with create remote repository.

--> To start tracking all changes done on a particular file(s) or all the files available in our project, we do :

    $ git add {filename.extension}

or 

    $ git add .

then we commit all the staged changes :

    $ git commit -m " A meaningful message about this change "


RQ : Basically, we say that a commit is a two steps job :

# We select which modified file to add to the commit ( Staging modified files ) :

    $ git add {filename_1.extension}

    $ git add {filename_2.extension}

# we take a snapshot ( a photograph of your work performed locally that has been staged ) of what is in the 
staging area :

    $ git commit -m " A meaningful message about this change "

--> Let's open the created 'index.html' from our command prompt window :

    -> Move to the source code folder 'src' :

        $ cd src
    
    -> Open the created 'index.html' file locally in a browser :

        $ start index.html
    
--> Let's add some "CSS" style to the webpage using the 'style' tags.

    <!-- Let's add some CSS to make all the content of this webpage centered  -->
    <style type="text/css">
        h1{
            position:absolute;
            top: 40%;
            width: 100%;
            /* font-family: Arial, Helvetica, sans-serif; */
            font-size: 100;
            text-align: center;
        }
    </style>

--> Let's check the modified files or the state of my Git Repository :

    $ git status 

--> To visualize the difference between the last commit and the current state of my project :

    $ git diff

    -> You can inspect exactly what has changed in a particular file :

    $ git diff { filename or foldername}

    NB : Press 'q' on your keyboard to exit the ' diff ' window.

--> let's commit our changes :

    $ git add .

    $ git commit -m " Content centered using the style tags "


--> To see the list of all the commits performed in this project :

    $ git log

<--------------------------  Git Branching Commands  @ 18:11  ----------------------------------------------------------------->

--> Usually in the industry, a developer will be assigned a single task to develop or implement one functionality of the 
project. One functionality is equal to one feature which is equivalent to one branch in Git.

In this case, we diverge from the master branch where the end product of the project will be built on. This will 
allow all people contributing in this project not to mess up with the work done by other colleague and also to 
prevent damage control on the entire project or workflow.

    -> To create a new branch, we do :

        $ git branch { new-branch-name }

    For example : We need to add a green background to our website 

        $ git branch leon-green-background

    -> To check whether the branch has been created or not :

        $ git branch

    -> To switch from the 'master' branch to 'leon-green-background' branch :

        $ git checkout leon-green-background

    -> From 'leon-green-background' branch, let's add a background color to our project :
        
        For background color using the link : https://flatuicolors.com/palette/defo

        /* Let's add some background color using the 'style' tags : */

        body{
            background-color: #2ecc71;
            color: white;
        }
    
    -> Let's track our modified files :

        $ git status

        $ git diff

    -> Let's do a snapshoot or commit our work :

        $ git add .

        $ git commit -m " Green Background Added "

    -> If we do a ' git status ', we should expect a clean working directory :

        $ git status

    -> if we switch to the 'master' branch we will not be seeing all the changes 
    done by 'leon-green-background' branch until we merge those changes to the 
    'master' branch because we have two versions of the project in Git.

    To merge the changes available in 'leon-green-background' branch to the 'master' branch which 
    is the official branch used to develop the end product of this project, we do :

        -> Swith to the 'master' branch :
            
            $ git checkout master
        
        -> Inspect the difference between the two branches 'master' branch and 'leon-green-background' branch  :

            $ git diff master..leon-green-background

        -> Let's merge 'leon-green-background' branch into the 'master' branch : 

            $ git merge leon-green-background






















